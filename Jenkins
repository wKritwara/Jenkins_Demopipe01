pipeline {
    agent {
        docker {
            image 'python:3.11'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    environment {
        SONARQUBE_TOKEN = credentials('sonarqube-token')
        SONARQUBE_SERVER = 'Sonarqube'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/wKritwara/Jenkins_Demopipe01.git'
            }
        }

        stage('Setup Environment') {
            steps {
                sh '''
                apt-get update && apt-get install -y openjdk-17-jdk wget unzip
                python3 -m venv venv
                . venv/bin/activate
                pip install --upgrade pip
                pip install -r requirements.txt
                pip install pytest pytest-cov
                # Install SonarScanner
                wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
                unzip sonar-scanner-cli-4.8.0.2856-linux.zip -d /opt
                export PATH=$PATH:/opt/sonar-scanner-4.8.0.2856-linux/bin
                '''
            }
        }

        stage('Run Tests & Coverage') {
            steps {
                sh '''
                . venv/bin/activate
                pytest --maxfail=1 --disable-warnings -q --cov=app --cov-report=xml
                '''
            }
        }

        stage('SonarQube Analysis') {
            steps {
                sh '''
                export PATH=$PATH:/opt/sonar-scanner-4.8.0.2856-linux/bin
                . venv/bin/activate
                sonar-scanner \
                  -Dsonar.projectKey=demoapi \
                  -Dsonar.sources=. \
                  -Dsonar.python.coverage.reportPaths=coverage.xml \
                  -Dsonar.host.url=http://172.17.0.3:9000 \
                  -Dsonar.login=${SONARQUBE_TOKEN}
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t fastapi-app:latest .'
            }
        }

        stage('Deploy Container') {
            steps {
                sh 'docker run -d -p 8000:8000 fastapi-app:latest'
            }
        }
    }
    post {
        always {
            echo "Pipeline finished"
        }
    }
}
