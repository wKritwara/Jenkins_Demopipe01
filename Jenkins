pipeline {
    agent {
        docker {
            image 'python:3.11'  // Docker image ที่ต้องการใช้
            args '-v /var/run/docker.sock:/var/run/docker.sock'  // optional ถ้าต้องใช้ Docker CLI
        }
    }
    environment {
        SONARQUBE = credentials('sonarqube-token')
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/wKritwara/Jenkins_Demopipe01.git'
            }
        }
        
        stage('Setup venv') {
            steps {
                script {
                    // Setup virtual environment, install dependencies in one go
                    sh '''
                    python3 -m venv venv
                    . venv/bin/activate  # Activate virtual environment
                    pip install --upgrade pip
                    pip install -r requirements.txt
                    '''
                }
            }
        }
        
        stage('Run Tests & Coverage') {
            steps {
                script {
                    // Run tests with coverage in the virtual environment
                    sh '''
                    . venv/bin/activate  # Ensure venv is activated
                    venv/bin/pytest --maxfail=1 --disable-warnings -q --cov=app --cov-report=xml
                    '''
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('Sonarqube') {
                    sh 'sonar-scan'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image from the Dockerfile
                    sh 'docker build -t fastapi-app:latest .'
                }
            }
        }

        stage('Deploy Container') {
            steps {
                script {
                    // Run Docker container in detached mode on port 8000
                    sh 'docker run -d -p 8000:8000 fastapi-app:latest'
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline finished"
        }
    }
}
